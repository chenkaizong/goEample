package main

import "fmt"

func main() {
	// 1、算数运算符 假定 A 值为 10，B 值为 20
	// +	相加	A + B 输出结果 30
	// -	相减	A - B 输出结果 -10
	// *	相乘	A * B 输出结果 200
	// /	相除	B / A 输出结果 2
	// %	求余	B % A 输出结果 0
	// ++	自增	A++ 输出结果 11,注意： 没有 ++A
	// –-	自减	A-- 输出结果 9 注意： 没有 --A

	// A := "10" B:="20"
	// +	字符串拼接	A + B 输出结果 1020

	//2、 赋值运算符

	// =	简单的赋值运算符，将一个表达式的值赋给一个左值	C = A + B 将 A + B 表达式结果赋值给 C
	// +=	相加后再赋值	C += A 等于 C = C + A
	// -=	相减后再赋值	C -= A 等于 C = C - A
	// *=	相乘后再赋值	C *= A 等于 C = C * A
	// /=	相除后再赋值	C /= A 等于 C = C / A
	// <<=	左移后赋值	C <<= 2 等于 C = C << 2
	// %=	求余后再赋值	C %= A 等于 C = C % A

	//3、 关系运算符
	// ==	检查两个值是否相等，如果相等返回 True 否则返回 False。	(A == B) 为 False
	// !=	检查两个值是否不相等，如果不相等返回 True 否则返回 False。	(A != B) 为 True
	// >	检查左边值是否大于右边值，如果是返回 True 否则返回 False。	(A > B) 为 False
	// <	检查左边值是否小于右边值，如果是返回 True 否则返回 False。	(A < B) 为 True
	// >=	检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。	(A >= B) 为 False
	// <=	检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。	(A <= B) 为 True

	// 4、逻辑运算符
	// 设定 A 值为 True，B 值为 False
	// &&	逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。	(A && B) 为 False
	// ll	逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。	(A
	// !	逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。	!(A && B) 为 True

	// 5、位运算符
	// p	q	p & q	plq	p ^ q
	// 0	0	0	0	0
	// 0	1	0	1	1
	// 1	1	1	1	0
	// 1	0	0	1	1
	// 设定 A = 60；B = 13；其二进制数转换为：
	// A = 0011 1100
	// B = 0000 1101
	// -----------------
	// A&B = 0000 1100
	// A|B = 0011 1101
	// A^B = 0011 0001		//相同为假，不同为真

	// <<	左移运算符"<<“是双目运算符。左移n位就是乘以2的n次方。 其功能把”<<“左边的运算数的各二进位全部左移若干位，由”<<"右边的数指定移动的位数，高位丢弃，低位补0。	A << 2 结果为 240 ，二进制为 1111 0000
	// >>	右移运算符">>“是双目运算符。右移n位就是除以2的n次方。 其功能是把”>>“左边的运算数的各二进位全部右移若干位，”>>"右边的数指定移动的位数。	A >> 2 结果为 15 ，二进制为 0000 1111

	// 六，其他运算符

	// &	返回变量存储地址	&a 返回变量的实际内存地址
	// *	指针变量	*a 返回指针变量对应的数值
	// 不能用于基础类型

	a := [...]int{1, 2, 3, 4}
	b := &a
	b[2] = 100
	fmt.Println(a)
	fmt.Println(*b)
	fmt.Println(*b == a)

	fmt.Printf("%T,%T", a, b) //[4]int,*[4]int
}
